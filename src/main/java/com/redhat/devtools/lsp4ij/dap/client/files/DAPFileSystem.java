/*******************************************************************************
 * Copyright (c) 2025 Red Hat, Inc.
 * Distributed under license by Red Hat, Inc. All rights reserved.
 * This program is made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution,
 * and is available at https://www.eclipse.org/legal/epl-v20.html
 *
 * Contributors:
 * Red Hat, Inc. - initial API and implementation
 * Angelo Zerr - implementation of DAP disassembly support
 ******************************************************************************/
package com.redhat.devtools.lsp4ij.dap.client.files;

import com.intellij.openapi.vfs.ex.dummy.DummyCachingFileSystem;
import org.jetbrains.annotations.NotNull;

/**
 * A virtual file system used to represent disassembly or sourceReference
 * files generated by Debug Adapter Protocol (DAP) debug sessions in IntelliJ.
 * <p>
 * Each {@link DAPFile} is stored in this file system and can be
 * accessed via a virtual URL of the form:
 * <pre>
 *     dap-file:///$projectLocationHash/$configName/$sourceName
 * </pre>
 * <ul>
 *     <li>{@code $projectLocationHash} is a unique identifier of the project location.</li>
 *     <li>{@code $configName} is the name of the run/debug configuration that produced the disassembly.</li>
 *     <li>{@code $sourceName} is the name of the source reference or "disassembly" if the file is a Disassembly file </li>
 * </ul>
 * <p>
 * This file system does not correspond to any real files on disk and is
 * used solely for displaying disassembly content in the IDE.
 */
public class DAPFileSystem extends DummyCachingFileSystem<DAPFile> {

    /**
     * Protocol name used to identify this virtual file system.
     */
    public static final String PROTOCOL = "dap-file";

    /**
     * Constructs the DisassemblyFileSystem using the {@link #PROTOCOL}.
     */
    public DAPFileSystem() {
        super(PROTOCOL);
    }

    /**
     * Resolves a virtual file path into a {@link DAPFile}.
     * <p>
     * The expected path format is "/$projectLocationHash/$configName/$sourceName".
     * <p>
     * Example of a valid path:
     * <pre>
     *     "/abc123/MyRunConfiguration"
     * </pre>
     * where "abc123" is the projectId and "MyRunConfiguration" is the configName.
     * <p>
     * If the path is invalid or the project cannot be found, this method returns {@code null}.
     *
     * @param path the virtual file path to resolve
     * @return the {@link DAPFile} associated with the path, or {@code null} if not found
     */
    @Override
    protected DAPFile findFileByPathInner(@NotNull String path) {
        // Remove the leading slash from the virtual path
        String dapFilePath = path.substring(1);

        // Split the path into two components: projectId and configName
        var result = dapFilePath.split("/");

        // Expect exactly 2 components; otherwise the path is invalid
        // Example:
        // - "abc123/MyRunConfiguration/disassembly"
        // - "abc123/MyRunConfiguration/@MySourceName"
        if (result.length != 3) {
            return null;
        }

        // The first component is the unique identifier of the project location
        String projectId = result[0];
        var project = getProject(projectId);
        if (project == null) {
            return null;
        }

        // The second component is the name of the run/debug configuration that generated this disassembly
        String configName = result[1];

        // The third component is the name of the source name
        String sourceName = result[2];

        // Retrieve or create the corresponding DisassemblyFile for this project and configuration
        return DAPFileRegistry.getInstance().getOrCreateDAPFile(configName, sourceName, project);
    }
}
