/*******************************************************************************
 * Copyright (c) 2025 Red Hat, Inc.
 * Distributed under license by Red Hat, Inc. All rights reserved.
 * This program is made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution,
 * and is available at https://www.eclipse.org/legal/epl-v20.html
 *
 * Contributors:
 * Red Hat, Inc. - initial API and implementation
 * Angelo Zerr - implementation of DAP disassembly editor support
 ******************************************************************************/
package com.redhat.devtools.lsp4ij.dap.disassembly;

import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.EditorFactory;
import com.intellij.openapi.editor.EditorKind;
import com.intellij.openapi.editor.ex.EditorEx;
import com.intellij.openapi.fileEditor.FileDocumentManager;
import com.intellij.openapi.fileEditor.FileEditorState;
import com.intellij.openapi.fileEditor.OpenFileDescriptor;
import com.intellij.openapi.fileEditor.TextEditor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.Key;
import com.intellij.pom.Navigatable;
import com.intellij.openapi.vfs.VirtualFile;
import com.redhat.devtools.lsp4ij.dap.client.files.DeferredSourcePosition;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.beans.PropertyChangeListener;

/**
 * A custom editor for {@link DisassemblyFile} instances.
 * <p>
 * Displays machine-level disassembly instructions generated by a DAP server
 * in the main editor area, using a read-only text editor with features like
 * line numbers and folding enabled.
 */
public class DisassemblyFileEditor implements TextEditor {

    /** The virtual disassembly file being displayed. */
    private final @NotNull DisassemblyFile file;

    /** The IntelliJ editor instance used to render the disassembly content. */
    private final @NotNull EditorEx editor;

    /**
     * Constructs a new DisassemblyFileEditor for the given file and project.
     *
     * @param file    the disassembly virtual file
     * @param project the IntelliJ project
     */
    public DisassemblyFileEditor(@NotNull DisassemblyFile file, @NotNull Project project) {
        this.file = file;
        this.editor = createEditor(file, project);
    }

    /**
     * Creates and configures an editor instance for the given virtual file.
     * <p>
     * The editor is read-only, with line numbers and folding enabled.
     *
     * @param file    the virtual file to edit
     * @param project the project
     * @return a configured EditorEx instance
     */
    private static @NotNull EditorEx createEditor(@NotNull VirtualFile file, @NotNull Project project) {
        var doc = FileDocumentManager.getInstance().getDocument(file);
        var disassemblyEditor = (EditorEx) EditorFactory.getInstance().createEditor(doc, project, file, true, EditorKind.MAIN_EDITOR);

        // Editor settings for disassembly display
        disassemblyEditor.getSettings().setLineNumbersShown(true);
        disassemblyEditor.getSettings().setFoldingOutlineShown(true);
        disassemblyEditor.getSettings().setCaretRowShown(false);
        disassemblyEditor.getSettings().setRightMarginShown(false);
        disassemblyEditor.getSettings().setGutterIconsShown(true);

        return disassemblyEditor;
    }

    @Override
    public @NotNull JComponent getComponent() {
        return editor.getComponent();
    }

    @Override
    public @Nullable JComponent getPreferredFocusedComponent() {
        return editor.getComponent();
    }

    @Override
    public @NotNull String getName() {
        return "Disassembly";
    }

    @Override
    public VirtualFile getFile() {
        return file;
    }

    @Override
    public void setState(@NotNull FileEditorState state) {
        // No special editor state to restore
    }

    @Override
    public boolean isModified() {
        return false; // Disassembly is read-only
    }

    @Override
    public boolean isValid() {
        return true;
    }

    @Override
    public void addPropertyChangeListener(@NotNull PropertyChangeListener listener) {
        editor.addPropertyChangeListener(listener);
    }

    @Override
    public void removePropertyChangeListener(@NotNull PropertyChangeListener listener) {
        editor.removePropertyChangeListener(listener);
    }

    @Override
    public void dispose() {
        // The editor will be disposed by IntelliJ editor factory
    }

    @Override
    public <T> @Nullable T getUserData(@NotNull Key<T> key) {
        return editor.getUserData(key);
    }

    @Override
    public <T> void putUserData(@NotNull Key<T> key, @Nullable T value) {
        editor.putUserData(key, value);
    }

    @Override
    public @NotNull Editor getEditor() {
        return editor;
    }

    @Override
    public boolean canNavigateTo(@NotNull Navigatable navigatable) {
        return navigatable instanceof DeferredSourcePosition<?,?>.DeferredNavigatable;
    }

    @Override
    public void navigateTo(@NotNull Navigatable navigatable) {
        ((OpenFileDescriptor) navigatable).navigateIn(getEditor());
    }
}
