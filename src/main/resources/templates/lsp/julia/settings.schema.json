{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "LSP4IJ/julia/settings.schema.json",
  "title": "LSP4IJ Julia language server settings JSON schema",
  "description": "JSON schema for Julia language server settings.",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "julia.executablePath": {
      "type": "string",
      "default": "",
      "description": "Points to the julia executable."
    },
    "julia.lint.run": {
      "type": "boolean",
      "default": true,
      "description": "Run the linter on active files."
    },
    "julia.lint.missingrefs": {
      "type": "string",
      "default": "none",
      "enum": [
        "none",
        "symbols",
        "all"
      ],
      "description": "Highlight unknown symbols. The `symbols` option will not mark unknown fields."
    },
    "julia.lint.disabledDirs": {
      "type": "array",
      "default": [
        "docs",
        "test"
      ],
      "description": "Specifies sub-directories in [a package directory](https://docs.julialang.org/en/v1/manual/code-loading/#Package-directories-1) where only basic linting is. This drastically lowers the chance for false positives."
    },
    "julia.lint.call": {
      "type": "boolean",
      "default": true,
      "description": "This compares  call signatures against all known methods for the called function. Calls with too many or too few arguments, or unknown keyword parameters are highlighted."
    },
    "julia.lint.iter": {
      "type": "boolean",
      "default": true,
      "description": "Check iterator syntax of loops. Will identify, for example, attempts to iterate over single values."
    },
    "julia.lint.nothingcomp": {
      "type": "boolean",
      "default": true,
      "description": "Check for use of `\u003d\u003d` rather than `\u003d\u003d\u003d` when comparing against `nothing`. "
    },
    "julia.lint.constif": {
      "type": "boolean",
      "default": true,
      "description": "Check for constant conditionals in if statements that result in branches never being reached.."
    },
    "julia.lint.lazy": {
      "type": "boolean",
      "default": true,
      "description": "Check for deterministic lazy boolean operators."
    },
    "julia.lint.datadecl": {
      "type": "boolean",
      "default": true,
      "description": "Check variables used in type declarations are datatypes."
    },
    "julia.lint.typeparam": {
      "type": "boolean",
      "default": true,
      "description": "Check parameters declared in `where` statements or datatype declarations are used."
    },
    "julia.lint.modname": {
      "type": "boolean",
      "default": true,
      "description": "Check submodule names do not shadow their parent\u0027s name."
    },
    "julia.lint.pirates": {
      "type": "boolean",
      "default": true,
      "description": "Check for type piracy - the overloading of external functions with methods specified for external datatypes. \u0027External\u0027 here refers to imported code."
    },
    "julia.lint.useoffuncargs": {
      "type": "boolean",
      "default": true,
      "description": "Check that all declared arguments are used within the function body."
    },
    "julia.enableCrashReporter": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "Enable crash reports to be sent to the julia VS Code extension developers."
    },
    "julia.enableTelemetry": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "Enable usage data and errors to be sent to the julia VS Code extension developers."
    },
    "julia.trace.server": {
      "type": "string",
      "default": "off",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "description": "Traces the communication between VS Code and the language server."
    },
    "julia.useRevise": {
      "type": "boolean",
      "default": true,
      "description": "Load Revise.jl on startup of the REPL."
    },
    "julia.usePlotPane": {
      "type": "boolean",
      "default": true,
      "description": "Display plots within VS Code. Might require a restart of the Julia process."
    },
    "julia.showRuntimeDiagnostics": {
      "type": "boolean",
      "default": true,
      "description": "Enable display of runtime diagnostics. These diagnostics are provided by packages that overload a `show` method for the `application/vnd.julia-vscode.diagnostics` MIME type."
    },
    "julia.inlayHints.runtime.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable display of runtime inlay hints. These hints are provided by packages that overload a `show` method for the `application/vnd.julia-vscode.inlayHints` MIME type."
    },
    "julia.inlayHints.static.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Enable display of static inlay hints."
    },
    "julia.inlayHints.static.variableTypes.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable type hints for variable definitions:\n```julia\nfoo #\u003d::Int64\u003d# \u003d 42\n```"
    },
    "julia.inlayHints.static.parameterNames.enabled": {
      "type": "string",
      "default": "literals",
      "enum": [
        "none",
        "literals",
        "all"
      ],
      "description": "Enable name hints for function parameters:\n```julia\nfoo(#\u003d bar: \u003d# 42)\n```"
    },
    "julia.focusPlotNavigator": {
      "type": "boolean",
      "default": false,
      "description": "Whether to automatically show the plot navigator when plotting."
    },
    "julia.useProgressFrontend": {
      "type": "boolean",
      "default": true,
      "description": "Display [progress bars](https://github.com/JunoLab/ProgressLogging.jl) within VS Code."
    },
    "julia.additionalArgs": {
      "type": "array",
      "default": [],
      "description": "Additional Julia arguments."
    },
    "julia.environmentPath": {
      "type": [
        "string",
        "null"
      ],
      "description": "Path to a julia environment. VS Code needs to be reloaded for changes to take effect. Explicitly supports substitution for the `${userHome}`, `${workspaceFolder}`, `${workspaceFolderBasename}`, `${workspaceFolder:\u003cFOLDER_NAME\u003e}`, `${pathSeparator}`, `${env:\u003cENVIRONMENT_VARIABLE\u003e}`, `${config:\u003cCONFIG_VARIABLE\u003e} tokens."
    },
    "julia.symbolCacheDownload": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "Download symbol server cache files from GitHub."
    },
    "julia.symbolserverUpstream": {
      "type": "string",
      "default": "https://www.julia-vscode.org/symbolcache",
      "description": "Symbol server cache download URL."
    },
    "julia.NumThreads": {
      "type": [
        "integer",
        "string",
        "null"
      ],
      "description": "Number of threads to use for Julia processes. A value of `auto` works on Julia versions that allow for `--threads\u003dauto`."
    },
    "julia.numTestProcesses": {
      "type": "integer",
      "default": 1,
      "description": "Number of processes to use for testing."
    },
    "julia.editor": {
      "type": "string",
      "default": "code",
      "description": "Command to open files from the REPL (via setting the `JULIA_EDITOR` environment variable)."
    },
    "julia.completionmode": {
      "type": "string",
      "default": "qualify",
      "description": "Sets the mode for completions.",
      "enum": [
        "exportedonly",
        "import",
        "qualify"
      ],
      "enumDescriptions": [
        "Show completions for the current namespace.",
        "Show completions for the current namespace and unexported variables of `using`ed modules. Selection of an unexported variable will result in the automatic insertion of an explicit `using` statement.",
        "Show completions for the current namespace and unexported variables of `using`ed modules. Selection of an unexported variable will complete to a qualified variable name."
      ]
    },
    "julia.cellDelimiters": {
      "type": "array",
      "default": [
        "^\\s?#\\s#+",
        "^##(?!#)",
        "^#(\\s?)%%",
        "^#-"
      ],
      "description": "Cell delimiter regular expressions for Julia files."
    },
    "julia.execution.resultType": {
      "type": "string",
      "default": "both",
      "description": "Specifies how to show inline execution results",
      "enum": [
        "REPL",
        "inline",
        "inline, errors in REPL",
        "both"
      ],
      "enumDescriptions": [
        "Shows inline execution results in REPL",
        "Shows inline execution results as inline bubbles",
        "Shows inline execution results in REPL and inline bubbles"
      ]
    },
    "julia.execution.codeInREPL": {
      "type": "boolean",
      "default": false,
      "description": "Print executed code in REPL and append it to the REPL history."
    },
    "julia.execution.saveOnEval": {
      "type": "boolean",
      "default": false,
      "description": "Save file before execution"
    },
    "julia.execution.inlineResultsForCellEvaluation": {
      "type": "boolean",
      "default": false,
      "description": "Show separate inline results for all code blocks in a cell"
    },
    "julia.packageServer": {
      "type": "string",
      "default": "",
      "description": "Julia package server. Sets the `JULIA_PKG_SERVER` environment variable *before* starting a Julia process. Leave this empty to use the systemwide default. Requires a restart of the Julia process."
    },
    "julia.persistentSession.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Experimental: Starts the interactive Julia session in a persistent `tmux` session. Note that `tmux` must be available in the shell defined with `#julia.persistentSession.shell#`."
    },
    "julia.persistentSession.shell": {
      "type": "string",
      "default": "/bin/sh",
      "description": "Shell used to start the persistent session."
    },
    "julia.persistentSession.shellExecutionArgument": {
      "type": "string",
      "default": "-c",
      "description": "Argument to execute code in the configured shell, e.g. `-c` for sh-likes or `/c` for `cmd`. Can contain multiple arguments separated by spaces."
    },
    "julia.persistentSession.tmuxSessionName": {
      "type": "string",
      "default": "julia_vscode",
      "description": "Name of the `tmux` session. Explicitly supports substitution for the `${userHome}`, `${workspaceFolder}`, `${workspaceFolderBasename}`, `${workspaceFolder:\u003cFOLDER_NAME\u003e}`, `${pathSeparator}`, `${env:\u003cENVIRONMENT_VARIABLE\u003e}`, `${config:\u003cCONFIG_VARIABLE\u003e} tokens."
    },
    "julia.persistentSession.closeStrategy": {
      "type": "string",
      "enum": [
        "ask",
        "close",
        "disconnect"
      ],
      "default": "ask",
      "description": "Behaviour when stopping a persistent session.",
      "enumDescriptions": [
        "Always ask",
        "Close the tmux session",
        "Disconnect, but keep the tmux session"
      ]
    },
    "julia.persistentSession.alwaysCopy": {
      "type": "boolean",
      "default": false,
      "description": "Always copy the command for connecting to an external REPL to the clipboard."
    },
    "julia.deleteJuliaCovFiles": {
      "type": "boolean",
      "default": true,
      "description": "Delete Julia .cov files when running tests with coverage, leaving only a .lcov file behind."
    },
    "julia.debuggerDefaultCompiled": {
      "type": "array",
      "default": [
        "Base.",
        "-Base.!",
        "-Base.|\u003e",
        "-Base.all",
        "-Base.all!",
        "-Base.any",
        "-Base.any!",
        "-Base.cd",
        "-Base.iterate",
        "-Base.collect",
        "-Base.collect_similar",
        "-Base._collect",
        "-Base.collect_to!",
        "-Base.collect_to_with_first!",
        "-Base.filter",
        "-Base.filter!",
        "-Base.foreach",
        "-Base.findall",
        "-Base.findfirst",
        "-Base.findlast",
        "-Base.findnext",
        "-Base.findprev",
        "-Base.Generator",
        "-Base.map",
        "-Base.map!",
        "-Base.maximum!",
        "-Base.minimum!",
        "-Base.mktemp",
        "-Base.mktempdir",
        "-Base.open",
        "-Base.prod!",
        "-Base.redirect_stderr",
        "-Base.redirect_stdin",
        "-Base.redirect_stdout",
        "-Base.reenable_sigint",
        "-Base.setindex!",
        "-Base.setprecision",
        "-Base.setrounding",
        "-Base.show",
        "-Base.sprint",
        "-Base.sum",
        "-Base.sum!",
        "-Base.task_local_storage",
        "-Base.timedwait",
        "-Base.withenv",
        "-Base.Broadcast",
        "Core",
        "Core.Compiler.",
        "Core.IR",
        "Core.Intrinsics",
        "DelimitedFiles",
        "Distributed",
        "LinearAlgebra.",
        "Serialization",
        "Statistics",
        "-Statistics.mean",
        "SparseArrays",
        "Mmap"
      ],
      "description": "Functions or modules that are set to compiled mode when setting the defaults."
    },
    "julia.runtimeCompletions": {
      "type": "boolean",
      "default": false,
      "description": "Request runtime completions from the integrated REPL."
    },
    "julia.plots.path": {
      "type": "string",
      "description": "Default directory for saving plots. Can either be relative to the current workspace or absolute."
    },
    "julia.workspace.showModules": {
      "type": "boolean",
      "default": true,
      "description": "Show top-level modules in the workspace."
    },
    "julia.languageServerExecutablePath": {
      "type": "string",
      "default": "",
      "description": "Points to the julia executable used to launch the language server process. This overwrites julia.executablePath for the language server launch if present."
    }
  }
}
